
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001152  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a0  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000080c  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b82  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 01 01 	call	0x202	; 0x202 <main>
  7a:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <gpioPinDirection>:
/* This function determine the direction of a specific Pin or pins by ANDing the PORTx Direction with NOT Pins Mask if the Required Direction is INPUT */
/* and ORing the PORTx Direction with Pins Mask if the Required Direction is OUTPUT */

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if( u8_direction == INPUT)
  82:	41 11       	cpse	r20, r1
  84:	1c c0       	rjmp	.+56     	; 0xbe <gpioPinDirection+0x3c>
	{
		switch(u8_port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	59 f0       	breq	.+22     	; 0xa0 <gpioPinDirection+0x1e>
  8a:	28 f0       	brcs	.+10     	; 0x96 <gpioPinDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	69 f0       	breq	.+26     	; 0xaa <gpioPinDirection+0x28>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	81 f0       	breq	.+32     	; 0xb4 <gpioPinDirection+0x32>
  94:	08 95       	ret
		{
			case GPIOA: PORTA_DIR &= ~(u8_pins);break;
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	60 95       	com	r22
  9a:	68 23       	and	r22, r24
  9c:	6a bb       	out	0x1a, r22	; 26
  9e:	08 95       	ret
			case GPIOB: PORTB_DIR &= ~(u8_pins);break;
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	60 95       	com	r22
  a4:	68 23       	and	r22, r24
  a6:	67 bb       	out	0x17, r22	; 23
  a8:	08 95       	ret
			case GPIOC: PORTC_DIR &= ~(u8_pins);break;
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	60 95       	com	r22
  ae:	68 23       	and	r22, r24
  b0:	64 bb       	out	0x14, r22	; 20
  b2:	08 95       	ret
			case GPIOD: PORTD_DIR &= ~(u8_pins);break;
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	60 95       	com	r22
  b8:	68 23       	and	r22, r24
  ba:	61 bb       	out	0x11, r22	; 17
  bc:	08 95       	ret
			default: break;
		}
	}
	
	else if( u8_direction == OUTPUT)
  be:	4f 3f       	cpi	r20, 0xFF	; 255
  c0:	b9 f4       	brne	.+46     	; 0xf0 <gpioPinDirection+0x6e>
	{
		switch(u8_port)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	51 f0       	breq	.+20     	; 0xda <gpioPinDirection+0x58>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <gpioPinDirection+0x50>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	59 f0       	breq	.+22     	; 0xe2 <gpioPinDirection+0x60>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	69 f0       	breq	.+26     	; 0xea <gpioPinDirection+0x68>
  d0:	08 95       	ret
		{
			case GPIOA: PORTA_DIR |= (u8_pins);break;
  d2:	8a b3       	in	r24, 0x1a	; 26
  d4:	68 2b       	or	r22, r24
  d6:	6a bb       	out	0x1a, r22	; 26
  d8:	08 95       	ret
			case GPIOB: PORTB_DIR |= (u8_pins);break;
  da:	87 b3       	in	r24, 0x17	; 23
  dc:	68 2b       	or	r22, r24
  de:	67 bb       	out	0x17, r22	; 23
  e0:	08 95       	ret
			case GPIOC: PORTC_DIR |= (u8_pins);break;
  e2:	84 b3       	in	r24, 0x14	; 20
  e4:	68 2b       	or	r22, r24
  e6:	64 bb       	out	0x14, r22	; 20
  e8:	08 95       	ret
			case GPIOD: PORTD_DIR |= (u8_pins);break;
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	68 2b       	or	r22, r24
  ee:	61 bb       	out	0x11, r22	; 17
  f0:	08 95       	ret

000000f2 <gpioPinWrite>:
/* After that we make sure of the value by ANDing the Pin Mask with the desired value*/
/* Finally ORing PORTx DATA with the value*/
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	uint8_t temp_reg;
	switch(u8_port)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	71 f0       	breq	.+28     	; 0x112 <gpioPinWrite+0x20>
  f6:	28 f0       	brcs	.+10     	; 0x102 <gpioPinWrite+0x10>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	99 f0       	breq	.+38     	; 0x122 <gpioPinWrite+0x30>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	c9 f0       	breq	.+50     	; 0x132 <gpioPinWrite+0x40>
 100:	08 95       	ret
	{
		case GPIOA:
		{
			 temp_reg = PORTA_DATA & ~(u8_pins);
 102:	8b b3       	in	r24, 0x1b	; 27
			 u8_value = (u8_pins & u8_value);
			 PORTA_DATA = temp_reg |u8_value ;
 104:	96 2f       	mov	r25, r22
 106:	90 95       	com	r25
 108:	89 23       	and	r24, r25
 10a:	46 23       	and	r20, r22
 10c:	48 2b       	or	r20, r24
 10e:	4b bb       	out	0x1b, r20	; 27
			 break;
 110:	08 95       	ret
		}
		case GPIOB:
		{ 
			temp_reg = PORTB_DATA & ~(u8_pins);
 112:	88 b3       	in	r24, 0x18	; 24
			u8_value = (u8_pins & u8_value);
			PORTB_DATA = temp_reg | ( u8_value);
 114:	96 2f       	mov	r25, r22
 116:	90 95       	com	r25
 118:	89 23       	and	r24, r25
 11a:	46 23       	and	r20, r22
 11c:	48 2b       	or	r20, r24
 11e:	48 bb       	out	0x18, r20	; 24
			break;
 120:	08 95       	ret
		}
		case GPIOC:
		{
			temp_reg = PORTC_DATA & ~(u8_pins);
 122:	85 b3       	in	r24, 0x15	; 21
			u8_value = (u8_pins & u8_value);
			PORTC_DATA = temp_reg | ( u8_value);
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	89 23       	and	r24, r25
 12a:	46 23       	and	r20, r22
 12c:	48 2b       	or	r20, r24
 12e:	45 bb       	out	0x15, r20	; 21
			break;
 130:	08 95       	ret
		}
		case GPIOD:
		{
			temp_reg = PORTD_DATA & ~(u8_pins);
 132:	82 b3       	in	r24, 0x12	; 18
			u8_value =(u8_pins & u8_value);
			PORTD_DATA = temp_reg | (u8_value);
 134:	96 2f       	mov	r25, r22
 136:	90 95       	com	r25
 138:	89 23       	and	r24, r25
 13a:	46 23       	and	r20, r22
 13c:	48 2b       	or	r20, r24
 13e:	42 bb       	out	0x12, r20	; 18
 140:	08 95       	ret

00000142 <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	61 f0       	breq	.+24     	; 0x15e <Led_Init+0x1c>
 146:	28 f0       	brcs	.+10     	; 0x152 <Led_Init+0x10>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	79 f0       	breq	.+30     	; 0x16a <Led_Init+0x28>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	99 f0       	breq	.+38     	; 0x176 <Led_Init+0x34>
 150:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 152:	4f ef       	ldi	r20, 0xFF	; 255
 154:	60 e1       	ldi	r22, 0x10	; 16
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <gpioPinDirection>
			break;
 15c:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 15e:	4f ef       	ldi	r20, 0xFF	; 255
 160:	60 e2       	ldi	r22, 0x20	; 32
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 41 00 	call	0x82	; 0x82 <gpioPinDirection>
			break;
 168:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 16a:	4f ef       	ldi	r20, 0xFF	; 255
 16c:	60 e4       	ldi	r22, 0x40	; 64
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 41 00 	call	0x82	; 0x82 <gpioPinDirection>
			break;
 174:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 176:	4f ef       	ldi	r20, 0xFF	; 255
 178:	60 e8       	ldi	r22, 0x80	; 128
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 41 00 	call	0x82	; 0x82 <gpioPinDirection>
 180:	08 95       	ret

00000182 <Led_On>:

/* This function is implemented to choose which led we want to turn on by sending its number*/
/* Based on gpioPinwrite function with HIGH value*/
void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	61 f0       	breq	.+24     	; 0x19e <Led_On+0x1c>
 186:	28 f0       	brcs	.+10     	; 0x192 <Led_On+0x10>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	79 f0       	breq	.+30     	; 0x1aa <Led_On+0x28>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	99 f0       	breq	.+38     	; 0x1b6 <Led_On+0x34>
 190:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 192:	4f ef       	ldi	r20, 0xFF	; 255
 194:	60 e1       	ldi	r22, 0x10	; 16
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 19c:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 19e:	4f ef       	ldi	r20, 0xFF	; 255
 1a0:	60 e2       	ldi	r22, 0x20	; 32
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 1a8:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 1aa:	4f ef       	ldi	r20, 0xFF	; 255
 1ac:	60 e4       	ldi	r22, 0x40	; 64
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 1b4:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 1b6:	4f ef       	ldi	r20, 0xFF	; 255
 1b8:	60 e8       	ldi	r22, 0x80	; 128
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
 1c0:	08 95       	ret

000001c2 <Led_Off>:

/* This function is implemented to choose which led we want to turn off by sending its number*/
/* Based on gpioPinwrite function with LAW value*/
void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	61 f0       	breq	.+24     	; 0x1de <Led_Off+0x1c>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <Led_Off+0x10>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	79 f0       	breq	.+30     	; 0x1ea <Led_Off+0x28>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	99 f0       	breq	.+38     	; 0x1f6 <Led_Off+0x34>
 1d0:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e1       	ldi	r22, 0x10	; 16
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 1dc:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	60 e2       	ldi	r22, 0x20	; 32
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 1e8:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	60 e4       	ldi	r22, 0x40	; 64
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
			break;
 1f4:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	60 e8       	ldi	r22, 0x80	; 128
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 79 00 	call	0xf2	; 0xf2 <gpioPinWrite>
 200:	08 95       	ret

00000202 <main>:


int main(void)
{
	 uint8_t rec_data=0;
	 Led_Init(LED_0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 a1 00 	call	0x142	; 0x142 <Led_Init>
	 Led_Off(LED_0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Led_Off>
    USART_Init(USART_ASYNC_MODE,USART_RX_TX_Enable,USART_8BIT_DATA,USART_PARITY_DIS,USART_RISING_TRANSMIT,USART_1_STOP_BIT,USART_Interrupt_Disabl,USART_9600_BAUD_RATE);
 20e:	0f 2e       	mov	r0, r31
 210:	f7 e6       	ldi	r31, 0x67	; 103
 212:	af 2e       	mov	r10, r31
 214:	f0 2d       	mov	r31, r0
 216:	c1 2c       	mov	r12, r1
 218:	e1 2c       	mov	r14, r1
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	46 e0       	ldi	r20, 0x06	; 6
 220:	68 e1       	ldi	r22, 0x18	; 24
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 2e 01 	call	0x25c	; 0x25c <USART_Init>
	 UART_Send_String(" Welcome... \n");
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <UART_Send_String>
	 UART_Send_String(" Please Enter o for Led on \n and other character for led off\n");
 230:	8e e6       	ldi	r24, 0x6E	; 110
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <UART_Send_String>

    while (1) 
    {
		  rec_data=USART_Receive_POLLING();
 238:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_Receive_POLLING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	e7 ea       	ldi	r30, 0xA7	; 167
 23e:	f1 e6       	ldi	r31, 0x61	; 97
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x3e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x44>
 246:	00 00       	nop
		  _delay_ms(100);
	    if(rec_data=='o')
 248:	8f 36       	cpi	r24, 0x6F	; 111
 24a:	21 f4       	brne	.+8      	; 0x254 <main+0x52>
	    {
		    Led_On(LED_0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 c1 00 	call	0x182	; 0x182 <Led_On>
 252:	f2 cf       	rjmp	.-28     	; 0x238 <main+0x36>
	    }
	    else
	    {
		    Led_Off(LED_0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Led_Off>
 25a:	ee cf       	rjmp	.-36     	; 0x238 <main+0x36>

0000025c <USART_Init>:
void UART_inti()
{
	
	UBRRL=103;
	UCSRB=0x18;
	UCSRC=0x86;
 25c:	af 92       	push	r10
 25e:	cf 92       	push	r12
 260:	ef 92       	push	r14
 262:	0f 93       	push	r16
 264:	10 bc       	out	0x20, r1	; 32
 266:	1a b8       	out	0x0a, r1	; 10
 268:	9a b1       	in	r25, 0x0a	; 10
 26a:	69 2b       	or	r22, r25
 26c:	6a b9       	out	0x0a, r22	; 10
 26e:	9a b1       	in	r25, 0x0a	; 10
 270:	c9 2a       	or	r12, r25
 272:	ca b8       	out	0x0a, r12	; 10
 274:	a9 b8       	out	0x09, r10	; 9
 276:	10 bc       	out	0x20, r1	; 32
 278:	90 b5       	in	r25, 0x20	; 32
 27a:	90 68       	ori	r25, 0x80	; 128
 27c:	90 bd       	out	0x20, r25	; 32
 27e:	90 b5       	in	r25, 0x20	; 32
 280:	89 2b       	or	r24, r25
 282:	80 bd       	out	0x20, r24	; 32
 284:	80 b5       	in	r24, 0x20	; 32
 286:	08 2b       	or	r16, r24
 288:	00 bd       	out	0x20, r16	; 32
 28a:	80 b5       	in	r24, 0x20	; 32
 28c:	48 2b       	or	r20, r24
 28e:	40 bd       	out	0x20, r20	; 32
 290:	80 b5       	in	r24, 0x20	; 32
 292:	e8 2a       	or	r14, r24
 294:	e0 bc       	out	0x20, r14	; 32
 296:	80 b5       	in	r24, 0x20	; 32
 298:	28 2b       	or	r18, r24
 29a:	20 bd       	out	0x20, r18	; 32
 29c:	0f 91       	pop	r16
 29e:	ef 90       	pop	r14
 2a0:	cf 90       	pop	r12
 2a2:	af 90       	pop	r10
 2a4:	08 95       	ret

000002a6 <USART_SEND_POLLING>:
	
}
void USART_SEND_POLLING(uint8_t Data)
{
	 while (!(UCSRA&(1<<UDRE)));  //waiting for the transmit buffer (UDR) to be empty
 2a6:	5d 9b       	sbis	0x0b, 5	; 11
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <USART_SEND_POLLING>
	 UDR=Data;	 
 2aa:	8c b9       	out	0x0c, r24	; 12
 2ac:	08 95       	ret

000002ae <USART_Receive_POLLING>:
}

uint8_t USART_Receive_POLLING(void)
{
	
   while (!(UCSRA&(1<<RXC)));  //waiting for the data to be received 
 2ae:	5f 9b       	sbis	0x0b, 7	; 11
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <USART_Receive_POLLING>
	return UDR;
 2b2:	8c b1       	in	r24, 0x0c	; 12
	
}
 2b4:	08 95       	ret

000002b6 <UART_Send_String>:
void UART_Send_String(uint8_t* str)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
	uint16_t i=0;
	while(str[i] != '\0')
 2bc:	88 81       	ld	r24, Y
 2be:	88 23       	and	r24, r24
 2c0:	31 f0       	breq	.+12     	; 0x2ce <UART_Send_String+0x18>
 2c2:	21 96       	adiw	r28, 0x01	; 1
	USART_SEND_POLLING(str[i++]);
 2c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <USART_SEND_POLLING>
	
}
void UART_Send_String(uint8_t* str)
{
	uint16_t i=0;
	while(str[i] != '\0')
 2c8:	89 91       	ld	r24, Y+
 2ca:	81 11       	cpse	r24, r1
 2cc:	fb cf       	rjmp	.-10     	; 0x2c4 <UART_Send_String+0xe>
	USART_SEND_POLLING(str[i++]);
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
